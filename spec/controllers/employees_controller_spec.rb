require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EmployeesController, type: :controller do

  # even if not recommended, we test the rendering in the controller
  render_views

  before do
    @employee = employees(:one)
    # add a signed employee to perform the tests
    sign_in(employees(:one), scope: :employee)
  end

  # This should return the minimal set of attributes required to create a valid
  # Employee. As you add validations to Employee, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip({email: 'tralala@test.com', password: 'tralala1*', password_confirmation: 'tralala1*', active: @employee.active, entry_date: @employee.entry_date, first_name: @employee.first_name, mobile: @employee.mobile, name: @employee.name, picture: @employee.picture, role: @employee.role})
  }

  let(:invalid_attributes) {
    skip({admin: true})
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EmployeesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all employees as @employees" do
      employees = Employee.all
      get :index, params: {}, session: valid_session
      expect(assigns(:employees)).to eq(employees)
    end
  end

  describe "GET #show" do
    it "assigns the requested employee as @employee" do
      get :show, id: @employee.to_param, session: valid_session
      expect(assigns(:employee)).to eq(@employee)
    end
  end

  describe "GET #new" do
    it "assigns a new employee as @employee" do
      get :new, params: {}, session: valid_session
      expect(assigns(:employee)).to be_a_new(Employee)
    end
  end

  describe "GET #edit" do
    it "assigns the requested employee as @employee" do
      get :edit, id: @employee.to_param, session: valid_session
      expect(assigns(:employee)).to eq(@employee)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Employee" do
        expect {
          post :create, employee: valid_attributes, session: valid_session
        }.to change(Employee, :count).by(1)
      end

      it "assigns a newly created employee as @employee" do
        post :create, employee: valid_attributes, session: valid_session
        expect(assigns(:employee)).to be_a(Employee)
        expect(assigns(:employee)).to be_persisted
      end

      it "redirects to the created employee" do
        post :create, employee: valid_attributes, session: valid_session
        expect(response).to redirect_to(Employee.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved employee as @employee" do
        post :create, employee: invalid_attributes, session: valid_session
        expect(assigns(:employee)).to be_a_new(Employee)
      end

      it "re-renders the 'new' template" do
        post :create, employee: invalid_attributes, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {email: 'tralala@test.com', password: 'tralala1*', password_confirmation: 'tralala1*', active: @employee.active, entry_date: @employee.entry_date, first_name: @employee.first_name, mobile: @employee.mobile, name: @employee.name, picture: @employee.picture, role: @employee.role}
      }

      it "updates the requested employee" do
        put :update, id: @employee.to_param, employee: new_attributes, session: valid_session
        @employee.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested employee as @employee" do
        put :update, id: @employee.to_param, employee: valid_attributes, session: valid_session
        expect(assigns(:employee)).to eq(employee)
      end

      it "redirects to the employee" do
        put :update, id: @employee.to_param, employee: valid_attributes, session: valid_session
        expect(response).to redirect_to(employee)
      end
    end

    context "with invalid params" do
      it "assigns the employee as @employee" do
        put :update, id: @employee.to_param, employee: invalid_attributes, session: valid_session
        expect(assigns(:employee)).to eq(employee)
      end

      it "re-renders the 'edit' template" do
        put :update, id: @employee.to_param, employee: invalid_attributes, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested employee" do
      expect {
        delete :destroy, id: @employee.to_param, session: valid_session
      }.to change(Employee, :count).by(-1)
    end

    it "redirects to the employees list" do
      delete :destroy, id: @employee.to_param, session: valid_session
      expect(response).to redirect_to(employees_url)
    end
  end

end
