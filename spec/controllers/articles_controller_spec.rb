require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ArticlesController, type: :controller do

  # even if not recommended, we test the rendering in the controller
  render_views

  before do
    @article = articles(:one)
  end

  # This should return the minimal set of attributes required to create a valid
  # Article. As you add validations to Article, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {name: @article.name, description: @article.description, position: @article.position, topic_id: @article.topic_id}
  }

  let(:invalid_attributes) {
    {topic_id: @article.topic_id}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ArticlesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all articles as @articles" do
      article = Article.create! valid_attributes
      get :index, locale: I18n.default_locale, topic_id: @article.topic_id, article: {}, session: valid_session
      expect(assigns(:articles)).not_to be_nil
    end
  end

  describe "GET #show" do
    it "assigns the requested article as @article" do
      article = Article.create! valid_attributes
      get :show, locale: I18n.default_locale, topic_id: @article.topic_id, id: article.to_param, session: valid_session
      expect(assigns(:article)).to eq(article)
    end
  end

  describe "GET #new" do
    it "assigns a new article as @article" do
      sign_in(employees(:one), scope: :employee)
      get :new, locale: I18n.default_locale, topic_id: @article.topic_id, params: {}, session: valid_session
      expect(assigns(:article)).to be_a_new(Article)
    end
  end

  describe "GET #edit" do
    it "assigns the requested article as @article" do
      sign_in(employees(:one), scope: :employee)
      article = Article.create! valid_attributes
      get :edit, locale: I18n.default_locale, topic_id: @article.topic_id, id: article.to_param, session: valid_session
      expect(assigns(:article)).to eq(article)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Article" do
        sign_in(employees(:one), scope: :employee)
        expect {
          post :create, locale: I18n.default_locale, topic_id: @article.topic_id, article: valid_attributes, session: valid_session
        }.to change(Article, :count).by(1)
      end

      it "assigns a newly created article as @article" do
        sign_in(employees(:one), scope: :employee)
        post :create, locale: I18n.default_locale, topic_id: @article.topic_id, article: valid_attributes, session: valid_session
        expect(assigns(:article)).to be_a(Article)
        expect(assigns(:article)).to be_persisted
      end

      it "redirects to the created article" do
        sign_in(employees(:one), scope: :employee)
        post :create, locale: I18n.default_locale, topic_id: @article.topic_id, article: valid_attributes, session: valid_session
        expect(response).to redirect_to(topic_article_path(assigns(:article), topic_id: @article.topic_id))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved article as @article" do
        sign_in(employees(:one), scope: :employee)
        post :create, locale: I18n.default_locale, topic_id: @article.topic_id, article: invalid_attributes, session: valid_session
        expect(assigns(:article)).to be_a_new(Article)
      end

      it "re-renders the 'new' template" do
        sign_in(employees(:one), scope: :employee)
        post :create, locale: I18n.default_locale, topic_id: @article.topic_id, article: invalid_attributes, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {name: @article.name, description: @article.description, position: @article.position, topic_id: @article.topic_id}
      }

      it "updates the requested article" do
        sign_in(employees(:one), scope: :employee)
        article = Article.create! valid_attributes
        put :update, locale: I18n.default_locale, topic_id: @article.topic_id, id: article.to_param, article: new_attributes, session: valid_session
        article.reload
      end

      it "assigns the requested article as @article" do
        sign_in(employees(:one), scope: :employee)
        article = Article.create! valid_attributes
        put :update, locale: I18n.default_locale, topic_id: @article.topic_id, id: article.to_param, article: valid_attributes, session: valid_session
        expect(assigns(:article)).to eq(article)
      end

      it "redirects to the article" do
        sign_in(employees(:one), scope: :employee)
        article = Article.create! valid_attributes
        put :update, locale: I18n.default_locale, topic_id: @article.topic_id, id: article.to_param, article: valid_attributes, session: valid_session
        expect(response).to redirect_to(topic_article_path(assigns(:article), topic_id: @article.topic_id))
      end
    end

    context "with invalid params" do
      it "assigns the article as @article" do
        sign_in(employees(:one), scope: :employee)
        article = Article.create! valid_attributes
        put :update, locale: I18n.default_locale, topic_id: @article.topic_id, id: article.to_param, article: invalid_attributes, session: valid_session
        expect(assigns(:article)).to eq(article)
      end

    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested article" do
      sign_in(employees(:one), scope: :employee)
      article = Article.create! valid_attributes
      expect {
        delete :destroy, locale: I18n.default_locale, topic_id: @article.topic_id, id: article.to_param, session: valid_session
      }.to change(Article, :count).by(-1)
    end

    it "redirects to the articles list" do
      sign_in(employees(:one), scope: :employee)
      article = Article.create! valid_attributes
      delete :destroy, locale: I18n.default_locale, topic_id: @article.topic_id, id: article.to_param, session: valid_session
      expect(response).to redirect_to(topic_articles_url(topic_id: @article.topic_id))
    end
  end

  describe "POST #sort" do
    it "sort the articles" do
      expect(articles(:order_one).position).to eq(1)

      # add a signed employee to perform the tests
      sign_in(employees(:one), scope: :employee)

      @order_one = articles(:order_one)

      # assert_equal(@order_one.position, 2) do
      post :sort, locale: I18n.default_locale, 'article' => [articles(:order_two).id.to_s, articles(:order_one).id.to_s]
      # we Need assigns to recover the modifications from the Controller
      # end

      articles(:order_one).reload
      expect(articles(:order_one).position).to eq(2)
    end
  end

end
