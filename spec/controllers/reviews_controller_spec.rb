require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe ReviewsController, type: :controller do

  # even if not recommended, we test the rendering in the controller
  render_views

  let(:review) {reviews(:one)}

  before do
    # add a signed customer to perform the tests
    sign_in(customers(:one), scope: :customer)
  end

  # This should return the minimal set of attributes required to create a valid
  # Review. As you add validations to Review, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {description: review.description, product_id: review.product_id, score: review.score, title: review.title}
  }

  let(:invalid_attributes) {
    {admin: true}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ReviewsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all reviews as @reviews" do
      get :index, session: valid_session
      expect(response).to be_success
      expect(assigns(:reviews)).not_to be_nil
    end
  end

  describe "GET #show" do
    it "assigns the requested review as @review" do
      get :show, params: {id: review.to_param}, session: valid_session
      expect(assigns(:review)).to eq(review)
    end

    it 'has the right elements in page' do
      get :show, params: {id: review.to_param}, session: valid_session
      assert_select '.customer-picture', 'data-customer' => review.customer.id
      assert_select '.customer-picture', 'data-locality' => review.customer.locality
      assert_select '.customer-picture', 'data-created' => review.customer.created_at.strftime('%D')
    end
  end

  describe "GET #new" do
    it "assigns a new review as @review" do
      get :new, session: valid_session
      expect(assigns(:review)).to be_a_new(Review)
    end
  end

  describe "GET #edit" do
    it "assigns the requested review as @review" do
      get :edit, params: {id: review.to_param}, session: valid_session
      expect(assigns(:review)).to eq(review)
    end

    it 'need login to edit review' do
      sign_out :customer
      get :edit, params: {id: review}
      expect(response).to redirect_to(new_customer_session_path)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Review" do
        expect {
          post :create, params: {review: valid_attributes}, session: valid_session
        }.to change(Review, :count).by(1)
      end

      it 'create review via ajax' do
        sign_in(customers(:one), scope: :customer)
        expect {
          post :create, xhr: true, params: {review: valid_attributes}, session: valid_session
        }.to change(Review, :count).by(1)

        expect(response).to be_success
      end

      it "assigns a newly created review as @review" do
        post :create, params: {review: valid_attributes}, session: valid_session
        expect(assigns(:review)).to be_a(Review)
        expect(assigns(:review)).to be_persisted
      end

      it "redirects to the created review" do
        post :create, params: {review: valid_attributes}, session: valid_session
        expect(assigns(:review)).not_to be_nil
        expect(response).to redirect_to(assigns(:review))
      end
    end

    context "with invalid params" do
      it 'need login to create review' do
        sign_out :customer
        expect {
          post :create, params: {review: valid_attributes}, session: valid_session
        }.to change(Review, :count).by(0)

        expect(response).to redirect_to(new_customer_session_path)
      end

      it "assigns a newly created but unsaved review as @review" do
        post :create, params: {review: invalid_attributes}, session: valid_session
        expect(assigns(:review)).to be_a_new(Review)
      end

      it "re-renders the 'new' template" do
        post :create, params: {review: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {description: review.description, product_id: review.product_id, score: review.score, title: review.title}
      }

      it "updates the requested review" do
        put :update, params: {id: review.to_param, review: new_attributes}, session: valid_session
        review.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested review as @review" do
        put :update, params: {id: review.to_param, review: valid_attributes}, session: valid_session
        expect(assigns(:review)).to eq(review)
      end

      it "redirects to the review" do
        put :update, params: {id: review.to_param, review: valid_attributes}, session: valid_session
        expect(response).to redirect_to(review)
      end
    end

    context "with invalid params" do
      it 'need ownership to update review' do
        sign_out :customer
        sign_in(customers(:two), scope: :customer)
        put :update, params: {id: review.to_param, review: valid_attributes}, session: valid_session

        expect(response).to redirect_to(catalog_products_path)
      end

      it "assigns the review as @review" do
        put :update, params: {id: review.to_param, review: invalid_attributes}, session: valid_session
        expect(assigns(:review)).to eq(review)
      end

    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested review" do
      expect {
        delete :destroy, params: {id: review.to_param}, session: valid_session
      }.to change(Review, :count).by(-1)
    end

    it "redirects to the reviews list" do
      delete :destroy, params: {id: review.to_param}, session: valid_session
      expect(response).to redirect_to(reviews_url)
    end
  end

end
