require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe PostsController, type: :controller do

  # even if not recommended, we test the rendering in the controller
  render_views
  
  before do
    @post = posts(:one)
    @post.receive!
    # add a signed customer to perform the tests
    sign_in(customers(:one), scope: :customer)
  end

  # This should return the minimal set of attributes required to create a valid
  # Post. As you add validations to Post, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {customer_id: @post.customer_id, description: @post.description, name: @post.name, visual: fixture_file_upload('files/uploads/post/visual/default_visual.jpg', 'image/jpg')}
  }

  let(:invalid_attributes) {
    {admin: true}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PostsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all posts as @posts" do
      get :index, params: {locale: I18n.default_locale},  session: valid_session
      expect(assigns(:posts)).not_to be_nil
    end
  end

  describe "GET #show" do
    it "assigns the requested post as @post" do
      get :show, params: {locale: I18n.default_locale, id: @post.to_param}, session: valid_session
      expect(assigns(:post)).to eq(@post)
    end

    it 'should show post with slug' do
      get :show, params: {locale: I18n.default_locale, id: @post.slug}
      expect(response).to be_success
      expect(assigns(:post)).to eq(@post)
    end
  end

  describe "GET #new" do
    it "assigns a new post as @post" do
      get :new, params: {locale: I18n.default_locale}, session: valid_session
      expect(assigns(:post)).to be_a_new(Post)
    end

    it 'not get new if not identified' do
      sign_out(customers(:one))
      get :new, params: {locale: I18n.default_locale}
      expect(response).to redirect_to(new_customer_session_path)
    end
  end

  describe "GET #edit" do
    it "assigns the requested post as @post" do
      get :edit, params: {locale: I18n.default_locale, id: @post.to_param}, session: valid_session
      expect(assigns(:post)).to eq(@post)
    end

    it 'should get edit with slug' do
      get :edit, params: {locale: I18n.default_locale, id: @post.slug}
      expect(response).to be_success
      expect(assigns(:post)).to eq(@post)
    end

    it 'should get edit if not identified' do
      sign_out(customers(:one))
      get :edit, params: {locale: I18n.default_locale, id: @post}
      expect(response).to redirect_to(new_customer_session_path)
    end

    it 'should not get edit if not post owner' do
      sign_out(customers(:one))
      sign_in(customers(:two), scope: :customer)
      get :edit, params: {locale: I18n.default_locale, id: @post.slug}

      expect(response).to redirect_to(posts_path(locale: I18n.default_locale))
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it 'not create if not identified' do
        sign_out(customers(:one))
        post :create, params: {locale: I18n.default_locale, post: valid_attributes}, session: valid_session
        expect(response).to redirect_to(new_customer_session_path)
      end

      it "creates a new Post" do
        expect {
          post :create, params: {locale: I18n.default_locale, post: valid_attributes}, session: valid_session
        }.to change(Post, :count).by(1)
      end

      it "assigns a newly created post as @post" do
        post :create, params: {locale: I18n.default_locale, post: valid_attributes}, session: valid_session
        expect(assigns(:post)).to be_a(Post)
        expect(assigns(:post)).to be_persisted
      end

      it "redirects to the created post" do
        post :create, params: {locale: I18n.default_locale, post: valid_attributes}, session: valid_session
        expect(response).to redirect_to(assigns(:post))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved post as @post" do
        post :create, params: {locale: I18n.default_locale, post: invalid_attributes}, session: valid_session
        expect(assigns(:post)).to be_a_new(Post)
      end

      it "re-renders the 'new' template" do
        post :create, params: {locale: I18n.default_locale, post: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {customer_id: @post.customer_id, description: @post.description, name: @post.name, visual: fixture_file_upload('files/uploads/post/visual/default_visual.jpg', 'image/jpg')}
      }

      it 'should not update post if not identified' do
        sign_out(customers(:one))
        put :update, params: {locale: I18n.default_locale, id: @post.to_param, post: new_attributes}, session: valid_session
        expect(response).to redirect_to(new_customer_session_path)
      end

      it 'should not get update if not post owner' do
        sign_out(customers(:one))
        sign_in(customers(:two), scope: :customer)
        put :update, params: {locale: I18n.default_locale, id: @post.to_param, post: new_attributes}, session: valid_session
        expect(response).to redirect_to(posts_path(locale: I18n.default_locale))
      end

      it "updates the requested post" do
        put :update, params: {locale: I18n.default_locale, id: @post.to_param, post: new_attributes}, session: valid_session
        @post.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested post as @post" do
        put :update, params: {locale: I18n.default_locale, id: @post.to_param, post: valid_attributes}, session: valid_session
        expect(assigns(:post)).to eq(@post)
      end

      it "redirects to the post" do
        put :update, params: {locale: I18n.default_locale, id: @post.to_param, post: valid_attributes}, session: valid_session
        expect(response).to redirect_to(@post)
      end
    end

    context "with invalid params" do
      it "assigns the post as @post" do
        put :update, params: {locale: I18n.default_locale, id: @post.to_param, post: invalid_attributes}, session: valid_session
        expect(assigns(:post)).to eq(@post)
      end

      it "re-renders the 'edit' template" do
        put :update, params: {locale: I18n.default_locale, id: @post.to_param, post: invalid_attributes}, session: valid_session
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE #destroy" do
    it 'should not destroy post if not identified' do
      sign_out(customers(:one))
      delete :destroy, params: {locale: I18n.default_locale, id: @post}
      expect(response).to redirect_to(new_customer_session_path)
    end

    it 'should not destroy post if not post owner' do
      sign_out(customers(:one))
      sign_in(customers(:two), scope: :customer)
      delete :destroy, params: {locale: I18n.default_locale, id: @post}
      expect(response).to redirect_to(posts_path(locale: I18n.default_locale))
    end

    it "destroys the requested post" do
      expect {
        delete :destroy, params: {locale: I18n.default_locale, id: @post.to_param}, session: valid_session
      }.to change(Post, :count).by(-1)
    end

    it "redirects to the posts list" do
      delete :destroy, params: {locale: I18n.default_locale, id: @post.to_param}, session: valid_session
      expect(response).to redirect_to(posts_url)
    end
  end

end
