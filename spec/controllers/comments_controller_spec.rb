require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe CommentsController, type: :controller do

  before do
    @comment =comments(:one)
    # add a signed customer to perform the tests
    sign_in(customers(:one), scope: :customer)
  end

  # This should return the minimal set of attributes required to create a valid
  # Comment. As you add validations to Comment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {commentable_id: @comment.commentable_id, customer_id: @comment.customer_id, text: @comment.text}
  }

  let(:invalid_attributes) {
    {admin: true}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CommentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all comments as @comments" do
      get :index, params: {}, session: valid_session
      expect(assigns(:comments)).not_to be_nil
    end
  end

  describe "GET #show" do
    it "assigns the requested comment as @comment" do
      get :show, id: @comment, session: valid_session
      expect(assigns(:comment)).to eq(@comment)
    end
  end

  describe "GET #new for Post" do
    it "assigns a new comment as @comment" do
      sign_in(@customer, scope: :customer)
      existing_post = posts(:one)
      get :new, post_id: existing_post.id, params: {}, session: valid_session
      expect(assigns(:context)).to eq(existing_post)
      expect(assigns(:comment)).to be_a_new(Comment)
    end
  end

  describe "GET #new for ForumAnswer" do
    it "assigns a new comment as @comment" do
      sign_in(@customer, scope: :customer)
      forum_answer = forum_answers(:one)
      get :new, forum_answer_id: forum_answer.id, params: {}, session: valid_session
      expect(assigns(:context)).to eq(forum_answer)
      expect(assigns(:comment)).to be_a_new(Comment)
    end
  end

  describe "GET #edit" do
    it "assigns the requested comment as @comment" do
      comment = Comment.create! valid_attributes
      get :edit, id: comment.to_param, session: valid_session
      expect(assigns(:comment)).to eq(comment)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Comment for Post" do
        expect {
          post :create, post_id: posts(:one).id, comment: valid_attributes, session: valid_session
        }.to change(Comment, :count).by(1)
      end

      it "assigns a newly created comment for Post as @comment" do
        post :create, post_id: posts(:one).id, comment: valid_attributes, session: valid_session
        expect(assigns(:comment)).to be_a(Comment)
        expect(assigns(:comment)).to be_persisted
      end

      it "redirects to the created comment for Post" do
        post :create, post_id: posts(:one).id, comment: valid_attributes, session: valid_session
        expect(response).to redirect_to(post_path(posts(:one)))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved comment as @comment" do
        post :create, post_id: posts(:one).id, comment: invalid_attributes, session: valid_session
        expect(assigns(:comment)).to be_a_new(Comment)
      end

      it "re-renders the 'new' template" do
        post :create, post_id: posts(:one).id, comment: invalid_attributes, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {commentable_id: @comment.commentable_id, customer_id: @comment.customer_id, text: @comment.text}
      }

      it "updates the requested comment for Post" do
        put :update, post_id: posts(:one).id, id: @comment.to_param, comment: new_attributes, session: valid_session
        @comment.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested comment as @comment for Post" do
        put :update, post_id: posts(:one).id, id: @comment.to_param, comment: valid_attributes, session: valid_session
        expect(assigns(:comment)).to eq(@comment)
      end

      it "redirects to the comment for Post" do
        put :update, post_id: posts(:one).id, id: @comment.to_param, comment: valid_attributes, session: valid_session
        context = assigns(:context)
        expect(context).not_to be_nil
        expect(response).to redirect_to(post_path(context))
      end
    end

    context "with invalid params" do
      it "assigns the comment as @comment for Post" do
        put :update, post_id: posts(:one).id, id: @comment, comment: invalid_attributes, session: valid_session
        expect(assigns(:comment)).to eq(@comment)
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested comment" do
      expect {
        delete :destroy, post_id: posts(:one).id, id: @comment.to_param, session: valid_session
      }.to change(Comment, :count).by(-1)
    end

    it "redirects to the comments list" do
      delete :destroy, post_id: posts(:one).id, id: @comment.to_param, session: valid_session
      context = assigns(:context)
      expect(context).not_to be_nil
      expect(response).to redirect_to(post_path(context))
    end
  end

end
