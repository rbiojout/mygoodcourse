require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TopicsController, type: :controller do

  # even if not recommended, we test the rendering in the controller
  render_views

  let(:topic) { topics(:one)}

  # This should return the minimal set of attributes required to create a valid
  # Topic. As you add validations to Topic, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {country_id: topic.country_id, description: topic.description, name: topic.name, position: topic.position, slug: topic.slug}
  }

  let(:invalid_attributes) {
    {admin: true}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TopicsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #index" do
    it "assigns all topics as @topics" do
      get :index, params: {locale: I18n.default_locale}, session: valid_session
      expect(assigns(:topics)).not_to be_nil
    end
  end

  describe "GET #show" do
    it "assigns the requested topic as @topic" do
      get :show, params: {locale: I18n.default_locale, id: topic.to_param}, session: valid_session
      expect(assigns(:topic)).to eq(topic)
    end
  end

  describe "GET #new" do
    it "assigns a new topic as @topic" do
      sign_in(employees(:one), scope: :employee)
      get :new, params: {locale: I18n.default_locale}, session: valid_session
      expect(assigns(:topic)).to be_a_new(Topic)
    end
  end

  describe "GET #edit" do
    it "assigns the requested topic as @topic" do
      sign_in(employees(:one), scope: :employee)
      get :edit, params: {locale: I18n.default_locale, id: topic.to_param}, session: valid_session
      expect(assigns(:topic)).to eq(topic)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Topic" do
        sign_in(employees(:one), scope: :employee)
        expect {
          post :create, params: {locale: I18n.default_locale, topic: valid_attributes}, session: valid_session
        }.to change(Topic, :count).by(1)
      end

      it "assigns a newly created topic as @topic" do
        sign_in(employees(:one), scope: :employee)
        post :create, params: {locale: I18n.default_locale, topic: valid_attributes}, session: valid_session
        expect(assigns(:topic)).to be_a(Topic)
        expect(assigns(:topic)).to be_persisted
      end

      it "redirects to the created topic" do
        sign_in(employees(:one), scope: :employee)
        post :create, params: {locale: I18n.default_locale, topic: valid_attributes}, session: valid_session
        expect(assigns(:topic)).not_to be_nil
        expect(response).to redirect_to(assigns(:topic))
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved topic as @topic" do
        sign_in(employees(:one), scope: :employee)
        post :create, params: {locale: I18n.default_locale, topic: invalid_attributes}, session: valid_session
        expect(assigns(:topic)).to be_a_new(Topic)
      end

      it "re-renders the 'new' template" do
        sign_in(employees(:one), scope: :employee)
        post :create, params: {locale: I18n.default_locale, topic: invalid_attributes}, session: valid_session
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {country_id: topic.country_id, description: topic.description, name: topic.name, position: topic.position, slug: topic.slug}
      }

      it "updates the requested topic" do
        sign_in(employees(:one), scope: :employee)
        put :update, params: {locale: I18n.default_locale, id: topic.to_param, topic: new_attributes}, session: valid_session
        topic.reload
        skip("Add assertions for updated state")
      end

      it "assigns the requested topic as @topic" do
        sign_in(employees(:one), scope: :employee)
        put :update, params: {locale: I18n.default_locale, id: topic.to_param, topic: valid_attributes}, session: valid_session
        expect(assigns(:topic)).to eq(topic)
      end

      it "redirects to the topic" do
        sign_in(employees(:one), scope: :employee)
        put :update, params: {locale: I18n.default_locale, id: topic.to_param, topic: valid_attributes}, session: valid_session
        expect(response).to redirect_to(topic)
      end
    end

    context "with invalid params" do
      it "assigns the topic as @topic" do
        sign_in(employees(:one), scope: :employee)
        put :update, params: {locale: I18n.default_locale, id: topic.to_param, topic: invalid_attributes}, session: valid_session
        expect(assigns(:topic)).to eq(topic)
      end

    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested topic" do
      sign_in(employees(:one), scope: :employee)
      expect {
        delete :destroy, params: {locale: I18n.default_locale, id: topic.to_param}, session: valid_session
      }.to change(Topic, :count).by(-1)
    end

    it "redirects to the topics list" do
      sign_in(employees(:one), scope: :employee)
      delete :destroy, params: {locale: I18n.default_locale, id: topic.to_param}, session: valid_session
      expect(response).to redirect_to(topics_url)
    end
  end

end
