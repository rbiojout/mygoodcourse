require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe OrdersController, type: :controller do

  # even if not recommended, we test the rendering in the controller
  render_views

  let(:order) {
    @order = orders(:one)
  }

  let(:new_order) {
    Order.create(ip_address: '127.0.0.1')
  }

  # This should return the minimal set of attributes required to create a valid
  # Order. As you add validations to Order, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # OrdersController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #show" do
    it "assigns the requested order as @order if logged in" do
      # add a signed customer to perform the tests
      sign_in(customers(:one), scope: :customer)
      get :show, id: order.to_param, session: valid_session
      expect(assigns(:order)).to eq(order)
      expect(assigns(:payments)).to eq(order.payments.to_a)
    end

    it "prevent assigns the requested order as @order if not logged in" do
      sign_out(customers(:one))
      get :show, id: order.to_param, session: valid_session
      expect(response).to redirect_to(new_customer_session_path)
    end

    it "prevent assigns the requested order as @order if not owner" do
      sign_out(customers(:one))
      sign_in(customers(:two), scope: :customer)
      get :show, id: order.to_param, session: valid_session
      expect(response).to redirect_to(catalog_products_path)
    end
  end

  describe "GET #myorders" do
    it "has orders associated to customer" do
      sign_in(customers(:one), scope: :customer)
      get :myorders, session: valid_session
      expect(assigns(:orders)).not_to be_nil
      expect(assigns(:products)).not_to be_nil
    end

    it "has no orders when not logged in" do
      sign_out(customers(:one))
      get :myorders, session: valid_session
      expect(assigns(:orders)).to be_nil
      expect(assigns(:products)).to be_nil
    end

  end

  describe "GET|PATCH #checkout" do
    it "ask for product when signed in" do
      sign_in(customers(:one), scope: :customer)
      get :checkout, session: {order_id: new_order.id}
      expect(response).to redirect_to(catalog_products_path)
    end
  end


end
