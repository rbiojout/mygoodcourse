require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LikesController, type: :controller do

  # even if not recommended, we test the rendering in the controller
  render_views

  before do
    @like = likes(:cust_one_prod_one)
    # add a signed customer to perform the tests
    sign_in(customers(:one), scope: :customer)
  end

  # This should return the minimal set of attributes required to create a valid
  # Like. As you add validations to Like, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # LikesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "POST #like" do
    it "no creation if not logged in" do
      sign_out(customers(:one))
      expect {
        post :like, params: {like: {}, review_id: reviews(:one).id}
      }.to change(Like, :count).by(0)

      expect(response).to redirect_to(new_customer_session_path)
    end

    it "create like for review" do
      request.env['HTTP_REFERER'] = product_path(products(:one))
      expect {
        post :like, params: {like: {customer_id: customers(:one).id}, review_id: reviews(:one).id}
      }.to change(Like, :count).by(1)

      expect(response).to redirect_to(product_path(products(:one)))
    end

    it 'create like for review via ajax' do
      sign_in(customers(:one), scope: :customer)
      expect {
        post :like, xhr: true,  params: {like: {customer_id: customers(:one).id}, review_id: reviews(:one).id}
      }.to change(Like, :count).by(1)

      expect(response).to be_success
    end

    it "create like for product" do
      request.env['HTTP_REFERER'] = product_path(products(:one))
      expect {
        post :like, params: {like: {customer_id: customers(:one).id}, product_id: products(:one).id}
      }.to change(Like, :count).by(1)

      expect(response).to redirect_to(product_path(products(:one)))
    end
  end

  describe "DELETE #unlike" do
    it "destroys the requested like" do
      product = products(:two)
      request.env['HTTP_REFERER'] = product_path(product)
      post :like, params: {product_id: products(:two).id}

      expect(product.liked?(customers(:one))).to be_truthy

      request.env['HTTP_REFERER'] = product_path(product)
      expect {
        delete :unlike, params: {product_id: products(:two).id}
      }.to change(Like, :count).by(-1)

      expect(product.liked?(customers(:one))).not_to be_truthy
    end

    it "destroy the requested like via ajax" do
      product = products(:two)
      request.env['HTTP_REFERER'] = product_path(product)
      post :like, params: {product_id: product.id}

      expect(product.liked?(customers(:one))).to be_truthy

      request.env['HTTP_REFERER'] = product_path(product)
      expect {
        delete :unlike, xhr: true,  params: {like: {customer_id: customers(:one).id}, product_id: product.id}
      }.to change(Like, :count).by(-1)

      expect(product.liked?(customers(:one))).not_to be_truthy
    end
  end

end
